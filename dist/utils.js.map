{"version":3,"sources":["../src/utils.js"],"names":["oPROTO","Object","prototype","utils","re","VAR","ARRAY_NOTE","ARRAY_GLOB_NOTE","OBJECT_BRACKETS","ESCAPE","WILDCARD","WILDCARDS","NON_NEG_WILDCARD_TRAIL","NEGATE_ALL","isObject","o","toString","call","isArray","isCollection","isset","undefined","ensureArray","hasOwn","collection","keyOrIndex","isArr","hasOwnProperty","length","deepCopy","copy","keys","forEach","k","map","each","array","callback","thisArg","len","index","apply","eachRight","eachProp","object","key","eachItem","pregQuote","str","String","replace","stringOrArrayOf","value","hasSingleItemOf","arr","itemValue","arguments","normalizeGlobStr","glob","trim","normalizeNote","note","test","m","match","parseInt","NotationError","joinNotes","notes","lastIndex","current","i","next","dot","join","getNewNotation","newNotation","notation","errMsg","newN"],"mappings":"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","sourcesContent":["\nimport NotationError from './core/notation.error';\n\nconst oPROTO = Object.prototype;\n\nconst utils = {\n\n    re: {\n        VAR: /^[a-z$_][a-z$_\\d]*$/i,\n        ARRAY_NOTE: /^\\[(\\d+)\\]$/,\n        ARRAY_GLOB_NOTE: /^\\[(\\d+|\\*)\\]$/,\n        OBJECT_BRACKETS: /^\\[(?:'(.*)'|\"(.*)\"|`(.*)`)\\]$/,\n        ESCAPE: /[.\\\\+*?[^\\]$(){}=!<>|:-]/g,\n        WILDCARD: /^(\\[\\*\\]|\\*)$/,\n        // matches `*` and `[*]` if outside of quotes.\n        WILDCARDS: /(\\*|\\[\\*\\])(?=(?:[^\"]|\"[^\"]*\")*$)(?=(?:[^']|'[^']*')*$)/g,\n        // matches trailing wildcards at the end of a non-negated glob.\n        // e.g. `x.y.*[*].*` Â» $1 = `x.y`, $2 = `.*[*].*`\n        NON_NEG_WILDCARD_TRAIL: /^(?!!)(.+?)(\\.\\*|\\[\\*\\])+$/,\n        NEGATE_ALL: /^!(\\*|\\[\\*\\])$/\n    },\n\n    isObject(o) {\n        return oPROTO.toString.call(o) === '[object Object]';\n    },\n\n    isArray(o) {\n        return oPROTO.toString.call(o) === '[object Array]';\n    },\n\n    isCollection(o) {\n        return utils.isObject(o) || utils.isArray(o);\n    },\n\n    isset(o) {\n        return o !== undefined && o !== null;\n    },\n\n    ensureArray(o) {\n        if (utils.isArray(o)) return o;\n        return o === null || o === undefined ? [] : [o];\n    },\n\n    hasOwn(collection, keyOrIndex) {\n        if (!collection) return false;\n        const isArr = utils.isArray(collection);\n        if (!isArr && typeof keyOrIndex === 'string') {\n            return keyOrIndex && oPROTO.hasOwnProperty.call(collection, keyOrIndex);\n        }\n        if (typeof keyOrIndex === 'number') {\n            return keyOrIndex >= 0 && keyOrIndex < collection.length;\n        }\n        return false;\n    },\n\n    deepCopy(collection) {\n        if (utils.isObject(collection)) {\n            const copy = {};\n            Object.keys(collection).forEach(k => {\n                copy[k] = utils.deepCopy(collection[k]);\n            });\n            return copy;\n        }\n        if (utils.isArray(collection)) return collection.map(utils.deepCopy);\n        // not object or array\n        return collection;\n    },\n\n    // iterates over elements of an array, executing the callback for each\n    // element.\n    each(array, callback, thisArg) {\n        const len = array.length;\n        let index = -1;\n        while (++index < len) {\n            if (callback.apply(thisArg, [array[index], index, array]) === false) break;\n        }\n    },\n\n    eachRight(array, callback, thisArg) {\n        let index = array.length;\n        while (index--) {\n            if (callback.apply(thisArg, [array[index], index, array]) === false) break;\n        }\n    },\n\n    eachProp(object, callback, thisArg) {\n        const keys = Object.keys(object);\n        let index = -1;\n        while (++index < keys.length) {\n            const key = keys[index];\n            if (callback.apply(thisArg, [object[key], key, object]) === false) break;\n        }\n    },\n\n    eachItem(collection, callback, thisArg) {\n        if (utils.isArray(collection)) {\n            return utils.each(collection, callback, thisArg);\n        }\n        return utils.eachProp(collection, callback, thisArg);\n    },\n\n    pregQuote(str) {\n        return String(str).replace(utils.re.ESCAPE, '\\\\$&');\n    },\n\n    stringOrArrayOf(o, value) {\n        return typeof value === 'string'\n            && (o === value\n                || (utils.isArray(o) && o.length === 1 && o[0] === value)\n            );\n    },\n\n    hasSingleItemOf(arr, itemValue) {\n        return arr.length === 1\n            && (arguments.length === 2 ? arr[0] === itemValue : true);\n    },\n\n    // remove trailing/redundant wildcards if not negated\n    normalizeGlobStr(glob) {\n        return glob.trim().replace(utils.re.NON_NEG_WILDCARD_TRAIL, '$1');\n    },\n\n    normalizeNote(note) {\n        if (utils.re.VAR.test(note)) return note;\n        // check array index notation e.g. `[1]`\n        let m = note.match(utils.re.ARRAY_NOTE);\n        if (m) return parseInt(m[1], 10);\n        // check object bracket notation e.g. `[\"a-b\"]`\n        m = note.match(utils.re.OBJECT_BRACKETS);\n        if (m) return m[1] || m[2] || m[3];\n        throw new NotationError(`Invalid note: \"${note}\"`);\n    },\n\n    joinNotes(notes) {\n        const lastIndex = notes.length - 1;\n        return notes.map((current, i) => {\n            if (!current) return '';\n            const next = lastIndex >= i + 1 ? notes[i + 1] : null;\n            const dot = next\n                ? next[0] === '[' ? '' : '.'\n                : '';\n            return current + dot;\n        }).join('');\n    },\n\n    getNewNotation(newNotation, notation) {\n        const errMsg = `Invalid new notation: '${newNotation}'`;\n        // note validations (for newNotation and notation) are already made by\n        // other methods in the flow.\n        let newN;\n        if (typeof newNotation === 'string') {\n            newN = newNotation.trim();\n            if (!newN) throw new NotationError(errMsg);\n            return newN;\n        }\n        if (notation && !utils.isset(newNotation)) return notation;\n        throw new NotationError(errMsg);\n    }\n\n};\n\nexport default utils;\n"],"file":"utils.js"}